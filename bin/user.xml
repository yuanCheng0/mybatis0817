<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace:命名空间，做sql隔离 -->
<!-- 
	id:sql语句唯一标识
	parameterType:指定传入参数类型
	resultType:返回结果集类型
	#{}占位符:起到占位作用，如果传入的是基本类型(string,long,double,int等)，那么#{}中的变量名可以随便写
	 -->
<mapper namespace="test">
	<select id="findUserById" parameterType="java.lang.Integer" resultType="com.cy.pojo.User">
		select * from user where id=#{id}
	</select>
	
	<!-- 如果返回结果为集合，可以调用selectList方法，这个方法返回的结果就是一个集合，所以映射文件中应该配置成集合泛型的类型 
	${}拼接符，字符串原样拼接，如果传入的参数是基本类型(string,long,double,int等)中的变量名称必须是value
	注意：拼接符有sql注入的风险，所以慎重使用
	-->
	<select id="findUserName" parameterType="java.lang.String" resultType="com.cy.pojo.User">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- #{}如果传入的是pojo类型，那么#{}中的变量必须是pojo中对应的属性 
	如果要放回数据库自增主键可以使用select LAST_INSERT_ID()
	-->
	<insert id="insertUser" parameterType="com.cy.pojo.User">
		<!-- 执行select LAST_INSERT_ID()数据库函数，返回自增的主键 
			keyProperty 将返回的主键放入传入参数 的Id中保存
			order：当前函数相对于insert语句的执行顺序,在insert前执行是before，在insert后执行是after
			resultType：id的类型，也就是keyProperty中的属性类型
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		 insert into user (username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address}) 
	</insert>
	
	<delete id="delUserById" parameterType="int">
		DELETE from user where id=#{id}
	</delete>
	
	<update id="updateUserById" parameterType="com.cy.pojo.User">
		UPDATE user set username=#{username} where id =#{id}
	</update>
</mapper>
